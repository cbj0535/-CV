{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "train_json = json.load(open('../input/train.json'))\n",
    "\n",
    "# 数据标注处理\n",
    "def parse_json(d):\n",
    "    arr = np.array([\n",
    "        d['top'], d['height'], d['left'],  d['width'], d['label']\n",
    "    ])\n",
    "    arr = arr.astype(int)\n",
    "    return arr\n",
    "\n",
    "img = cv2.imread('../input/train/000000.png')\n",
    "arr = parse_json(train_json['000000.png'])\n",
    "\n",
    "plt.figure(figsize=(10, 10))\n",
    "plt.subplot(1, arr.shape[1]+1, 1)\n",
    "plt.imshow(img)\n",
    "plt.xticks([]); plt.yticks([])\n",
    "\n",
    "for idx in range(arr.shape[1]):\n",
    "    plt.subplot(1, arr.shape[1]+1, idx+2)\n",
    "    plt.imshow(img[arr[0, idx]:arr[0, idx]+arr[1, idx],arr[2, idx]:arr[2, idx]+arr[3, idx]])\n",
    "    plt.title(arr[4, idx])\n",
    "    plt.xticks([]); plt.yticks([])\n",
    "\n",
    "import os, sys, glob, shutil, json\n",
    "import cv2\n",
    "\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "\n",
    "import torch\n",
    "from torch.utils.data.dataset import Dataset\n",
    "import torchvision.transforms as transforms\n",
    "\n",
    "\n",
    "class SVHNDataset(Dataset):\n",
    "    def __init__(self, img_path, img_label, transform=None):\n",
    "        self.img_path = img_path\n",
    "        self.img_label = img_label\n",
    "        if transform is not None:\n",
    "            self.transform = transform\n",
    "        else:\n",
    "            self.transform = None\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        img = Image.open(self.img_path[index]).convert('RGB')\n",
    "\n",
    "        if self.transform is not None:\n",
    "            img = self.transform(img)\n",
    "\n",
    "        # 原始SVHN中类别10为数字0\n",
    "        lbl = np.array(self.img_label[index], dtype=np.int)\n",
    "        lbl = list(lbl) + (5 - len(lbl)) * [10]\n",
    "\n",
    "        return img, torch.from_numpy(np.array(lbl[:5]))\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.img_path)\n",
    "\n",
    "\n",
    "train_path = glob.glob('../input/train/*.png')\n",
    "train_path.sort()\n",
    "train_json = json.load(open('../input/train.json'))\n",
    "train_label = [train_json[x]['label'] for x in train_json]\n",
    "\n",
    "data = SVHNDataset(train_path, train_label,\n",
    "                   transforms.Compose([\n",
    "                       # 缩放到固定尺寸\n",
    "                       transforms.Resize((64, 128)),\n",
    "\n",
    "                       # 随机颜色变换\n",
    "                       transforms.ColorJitter(0.2, 0.2, 0.2),\n",
    "\n",
    "                       # 加入随机旋转\n",
    "                       transforms.RandomRotation(5),\n",
    "\n",
    "                       # 将图片转换为pytorch 的tesntor\n",
    "                       # transforms.ToTensor(),\n",
    "\n",
    "                       # 对图像像素进行归一化\n",
    "                       # transforms.Normalize([0.485,0.456,0.406],[0.229,0.224,0.225])\n",
    "                   ]))\n",
    "\n",
    "import os, sys, glob, shutil, json\n",
    "import cv2\n",
    "\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "\n",
    "import torch\n",
    "from torch.utils.data.dataset import Dataset\n",
    "import torchvision.transforms as transforms\n",
    "\n",
    "\n",
    "class SVHNDataset(Dataset):\n",
    "    def __init__(self, img_path, img_label, transform=None):\n",
    "        self.img_path = img_path\n",
    "        self.img_label = img_label\n",
    "        if transform is not None:\n",
    "            self.transform = transform\n",
    "        else:\n",
    "            self.transform = None\n",
    "\n",
    "    def __getitem__(self, index):\n",
    "        img = Image.open(self.img_path[index]).convert('RGB')\n",
    "\n",
    "        if self.transform is not None:\n",
    "            img = self.transform(img)\n",
    "\n",
    "        # 原始SVHN中类别10为数字0\n",
    "        lbl = np.array(self.img_label[index], dtype=np.int)\n",
    "        lbl = list(lbl) + (5 - len(lbl)) * [10]\n",
    "\n",
    "        return img, torch.from_numpy(np.array(lbl[:5]))\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.img_path)\n",
    "\n",
    "\n",
    "train_path = glob.glob('../input/train/*.png')\n",
    "train_path.sort()\n",
    "train_json = json.load(open('../input/train.json'))\n",
    "train_label = [train_json[x]['label'] for x in train_json]\n",
    "\n",
    "train_loader = torch.utils.data.DataLoader(\n",
    "    SVHNDataset(train_path, train_label,\n",
    "                transforms.Compose([\n",
    "                    transforms.Resize((64, 128)),\n",
    "                    transforms.ColorJitter(0.3, 0.3, 0.2),\n",
    "                    transforms.RandomRotation(5),\n",
    "                    transforms.ToTensor(),\n",
    "                    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n",
    "                ])),\n",
    "    batch_size=10,  # 每批样本个数\n",
    "    shuffle=False,  # 是否打乱顺序\n",
    "    num_workers=10,  # 读取的线程个数\n",
    ")\n",
    "\n",
    "for data in train_loader:\n",
    "    break"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
